/* eslint-disable */
/* tslint:disable */
// @ts-nocheck
/* prettier-ignore-start */

/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */

// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: uxt9vFaCd33rdvxeE5TgZm
// Component: -oAWrAr6TcnI

import * as React from "react";

import {
  Flex as Flex__,
  MultiChoiceArg,
  PlasmicDataSourceContextProvider as PlasmicDataSourceContextProvider__,
  PlasmicIcon as PlasmicIcon__,
  PlasmicImg as PlasmicImg__,
  PlasmicLink as PlasmicLink__,
  PlasmicPageGuard as PlasmicPageGuard__,
  SingleBooleanChoiceArg,
  SingleChoiceArg,
  Stack as Stack__,
  StrictProps,
  Trans as Trans__,
  classNames,
  createPlasmicElementProxy,
  deriveRenderOpts,
  ensureGlobalVariants,
  generateOnMutateForSpec,
  generateStateOnChangeProp,
  generateStateOnChangePropForCodeComponents,
  generateStateValueProp,
  get as $stateGet,
  hasVariant,
  initializeCodeComponentStates,
  initializePlasmicStates,
  makeFragment,
  omit,
  pick,
  renderPlasmicSlot,
  set as $stateSet,
  useCurrentUser,
  useDollarState,
  usePlasmicTranslator,
  useTrigger,
  wrapWithClassName
} from "@plasmicapp/react-web";
import {
  DataCtxReader as DataCtxReader__,
  useDataEnv,
  useGlobalActions
} from "@plasmicapp/react-web/lib/host";

import "@plasmicapp/react-web/lib/plasmic.css";

import plasmic_library_plasmic_color_type_css from "../library_plasmic_color_type/plasmic.module.css"; // plasmic-import: seaQhLVS4bbjiGvJJrRwyL/projectcss
import plasmic_antd_5_hostless_css from "../antd_5_hostless/plasmic.module.css"; // plasmic-import: ohDidvG9XsCeFumugENU3J/projectcss
import projectcss from "./plasmic.module.css"; // plasmic-import: uxt9vFaCd33rdvxeE5TgZm/projectcss
import sty from "./PlasmicRatings.module.css"; // plasmic-import: -oAWrAr6TcnI/css

import StarIcon from "./icons/PlasmicIcon__Star"; // plasmic-import: Vf30t7Snt-24/icon

createPlasmicElementProxy;

export type PlasmicRatings__VariantMembers = {
  stars: "zero" | "one" | "two" | "three" | "four" | "five";
};
export type PlasmicRatings__VariantsArgs = {
  stars?: SingleChoiceArg<"zero" | "one" | "two" | "three" | "four" | "five">;
};
type VariantPropType = keyof PlasmicRatings__VariantsArgs;
export const PlasmicRatings__VariantProps = new Array<VariantPropType>("stars");

export type PlasmicRatings__ArgsType = { numReviews?: React.ReactNode };
type ArgPropType = keyof PlasmicRatings__ArgsType;
export const PlasmicRatings__ArgProps = new Array<ArgPropType>("numReviews");

export type PlasmicRatings__OverridesType = {
  root?: Flex__<"div">;
  freeBox?: Flex__<"div">;
};

export interface DefaultRatingsProps {
  numReviews?: React.ReactNode;
  stars?: SingleChoiceArg<"zero" | "one" | "two" | "three" | "four" | "five">;
  className?: string;
}

const $$ = {};

function PlasmicRatings__RenderFunc(props: {
  variants: PlasmicRatings__VariantsArgs;
  args: PlasmicRatings__ArgsType;
  overrides: PlasmicRatings__OverridesType;
  forNode?: string;
}) {
  const { variants, overrides, forNode } = props;

  const args = React.useMemo(
    () =>
      Object.assign(
        {},
        Object.fromEntries(
          Object.entries(props.args).filter(([_, v]) => v !== undefined)
        )
      ),
    [props.args]
  );

  const $props = {
    ...args,
    ...variants
  };

  const $ctx = useDataEnv?.() || {};
  const refsRef = React.useRef({});
  const $refs = refsRef.current;

  const stateSpecs: Parameters<typeof useDollarState>[0] = React.useMemo(
    () => [
      {
        path: "stars",
        type: "private",
        variableType: "variant",
        initFunc: ({ $props, $state, $queries, $ctx }) => $props.stars
      }
    ],
    [$props, $ctx, $refs]
  );
  const $state = useDollarState(stateSpecs, {
    $props,
    $ctx,
    $queries: {},
    $refs
  });

  return (
    <Stack__
      as={"div"}
      data-plasmic-name={"root"}
      data-plasmic-override={overrides.root}
      data-plasmic-root={true}
      data-plasmic-for-node={forNode}
      hasGap={true}
      className={classNames(
        projectcss.all,
        projectcss.root_reset,
        projectcss.plasmic_default_styles,
        projectcss.plasmic_mixins,
        projectcss.plasmic_tokens,
        plasmic_library_plasmic_color_type_css.plasmic_tokens,
        plasmic_antd_5_hostless_css.plasmic_tokens,
        sty.root,
        {
          [sty.rootstars_five]: hasVariant($state, "stars", "five"),
          [sty.rootstars_four]: hasVariant($state, "stars", "four"),
          [sty.rootstars_one]: hasVariant($state, "stars", "one"),
          [sty.rootstars_three]: hasVariant($state, "stars", "three"),
          [sty.rootstars_two]: hasVariant($state, "stars", "two"),
          [sty.rootstars_zero]: hasVariant($state, "stars", "zero")
        }
      )}
    >
      <Stack__
        as={"div"}
        data-plasmic-name={"freeBox"}
        data-plasmic-override={overrides.freeBox}
        hasGap={true}
        className={classNames(projectcss.all, sty.freeBox)}
      >
        <StarIcon
          className={classNames(projectcss.all, sty.svg__izKxF, {
            [sty.svgstars_five__izKxFib5Ra]: hasVariant(
              $state,
              "stars",
              "five"
            ),
            [sty.svgstars_zero__izKxF78Nxh]: hasVariant($state, "stars", "zero")
          })}
          role={"img"}
        />

        <StarIcon
          className={classNames(projectcss.all, sty.svg__lFrxH, {
            [sty.svgstars_five__lFrxHib5Ra]: hasVariant(
              $state,
              "stars",
              "five"
            ),
            [sty.svgstars_four__lFrxHis0TI]: hasVariant(
              $state,
              "stars",
              "four"
            ),
            [sty.svgstars_one__lFrxHxlw2]: hasVariant($state, "stars", "one"),
            [sty.svgstars_three__lFrxHZyCa]: hasVariant(
              $state,
              "stars",
              "three"
            ),
            [sty.svgstars_two__lFrxHe48US]: hasVariant($state, "stars", "two"),
            [sty.svgstars_zero__lFrxH78Nxh]: hasVariant($state, "stars", "zero")
          })}
          role={"img"}
        />

        <StarIcon
          className={classNames(projectcss.all, sty.svg__h3GCm, {
            [sty.svgstars_five__h3GCmib5Ra]: hasVariant(
              $state,
              "stars",
              "five"
            ),
            [sty.svgstars_four__h3GCmis0TI]: hasVariant(
              $state,
              "stars",
              "four"
            ),
            [sty.svgstars_one__h3GCmXlw2]: hasVariant($state, "stars", "one"),
            [sty.svgstars_three__h3GCmZyCa]: hasVariant(
              $state,
              "stars",
              "three"
            ),
            [sty.svgstars_two__h3GCmE48US]: hasVariant($state, "stars", "two"),
            [sty.svgstars_zero__h3GCm78Nxh]: hasVariant($state, "stars", "zero")
          })}
          role={"img"}
        />

        <StarIcon
          className={classNames(projectcss.all, sty.svg__xBk1E, {
            [sty.svgstars_five__xBk1Eib5Ra]: hasVariant(
              $state,
              "stars",
              "five"
            ),
            [sty.svgstars_four__xBk1Eis0TI]: hasVariant(
              $state,
              "stars",
              "four"
            ),
            [sty.svgstars_one__xBk1EXlw2]: hasVariant($state, "stars", "one"),
            [sty.svgstars_three__xBk1EZyCa]: hasVariant(
              $state,
              "stars",
              "three"
            ),
            [sty.svgstars_two__xBk1EE48US]: hasVariant($state, "stars", "two"),
            [sty.svgstars_zero__xBk1E78Nxh]: hasVariant($state, "stars", "zero")
          })}
          role={"img"}
        />

        <StarIcon
          className={classNames(projectcss.all, sty.svg__oMsbH, {
            [sty.svgstars_five__oMsbHib5Ra]: hasVariant(
              $state,
              "stars",
              "five"
            ),
            [sty.svgstars_four__oMsbHis0TI]: hasVariant(
              $state,
              "stars",
              "four"
            ),
            [sty.svgstars_one__oMsbHxlw2]: hasVariant($state, "stars", "one"),
            [sty.svgstars_three__oMsbHZyCa]: hasVariant(
              $state,
              "stars",
              "three"
            ),
            [sty.svgstars_two__oMsbHe48US]: hasVariant($state, "stars", "two"),
            [sty.svgstars_zero__oMsbH78Nxh]: hasVariant($state, "stars", "zero")
          })}
          role={"img"}
        />

        <StarIcon
          className={classNames(projectcss.all, sty.svg__x6X9M, {
            [sty.svgstars_five__x6X9Mib5Ra]: hasVariant(
              $state,
              "stars",
              "five"
            ),
            [sty.svgstars_four__x6X9Mis0TI]: hasVariant(
              $state,
              "stars",
              "four"
            ),
            [sty.svgstars_one__x6X9Mxlw2]: hasVariant($state, "stars", "one"),
            [sty.svgstars_three__x6X9MZyCa]: hasVariant(
              $state,
              "stars",
              "three"
            ),
            [sty.svgstars_two__x6X9Me48US]: hasVariant($state, "stars", "two"),
            [sty.svgstars_zero__x6X9M78Nxh]: hasVariant($state, "stars", "zero")
          })}
          role={"img"}
        />

        <StarIcon
          className={classNames(projectcss.all, sty.svg__ypZuS, {
            [sty.svgstars_five__ypZuSib5Ra]: hasVariant(
              $state,
              "stars",
              "five"
            ),
            [sty.svgstars_four__ypZuSis0TI]: hasVariant(
              $state,
              "stars",
              "four"
            ),
            [sty.svgstars_three__ypZuSZyCa]: hasVariant(
              $state,
              "stars",
              "three"
            ),
            [sty.svgstars_two__ypZuSe48US]: hasVariant($state, "stars", "two")
          })}
          role={"img"}
        />

        <StarIcon
          className={classNames(projectcss.all, sty.svg__vgJTq, {
            [sty.svgstars_five__vgJTqib5Ra]: hasVariant(
              $state,
              "stars",
              "five"
            ),
            [sty.svgstars_four__vgJTqis0TI]: hasVariant(
              $state,
              "stars",
              "four"
            ),
            [sty.svgstars_three__vgJTqZyCa]: hasVariant(
              $state,
              "stars",
              "three"
            )
          })}
          role={"img"}
        />

        <StarIcon
          className={classNames(projectcss.all, sty.svg__lKjRt, {
            [sty.svgstars_five__lKjRTib5Ra]: hasVariant(
              $state,
              "stars",
              "five"
            ),
            [sty.svgstars_four__lKjRTis0TI]: hasVariant($state, "stars", "four")
          })}
          role={"img"}
        />

        <StarIcon
          className={classNames(projectcss.all, sty.svg__yyhnV, {
            [sty.svgstars_five__yyhnVib5Ra]: hasVariant($state, "stars", "five")
          })}
          role={"img"}
        />
      </Stack__>
      {renderPlasmicSlot({
        defaultContents: "(45 Review)",
        value: args.numReviews,
        className: classNames(sty.slotTargetNumReviews)
      })}
    </Stack__>
  ) as React.ReactElement | null;
}

const PlasmicDescendants = {
  root: ["root", "freeBox"],
  freeBox: ["freeBox"]
} as const;
type NodeNameType = keyof typeof PlasmicDescendants;
type DescendantsType<T extends NodeNameType> =
  (typeof PlasmicDescendants)[T][number];
type NodeDefaultElementType = {
  root: "div";
  freeBox: "div";
};

type ReservedPropsType = "variants" | "args" | "overrides";
type NodeOverridesType<T extends NodeNameType> = Pick<
  PlasmicRatings__OverridesType,
  DescendantsType<T>
>;
type NodeComponentProps<T extends NodeNameType> =
  // Explicitly specify variants, args, and overrides as objects
  {
    variants?: PlasmicRatings__VariantsArgs;
    args?: PlasmicRatings__ArgsType;
    overrides?: NodeOverridesType<T>;
  } & Omit<PlasmicRatings__VariantsArgs, ReservedPropsType> & // Specify variants directly as props
    // Specify args directly as props
    Omit<PlasmicRatings__ArgsType, ReservedPropsType> &
    // Specify overrides for each element directly as props
    Omit<
      NodeOverridesType<T>,
      ReservedPropsType | VariantPropType | ArgPropType
    > &
    // Specify props for the root element
    Omit<
      Partial<React.ComponentProps<NodeDefaultElementType[T]>>,
      ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>
    >;

function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
  type PropsType = NodeComponentProps<NodeName> & { key?: React.Key };
  const func = function <T extends PropsType>(
    props: T & StrictProps<T, PropsType>
  ) {
    const { variants, args, overrides } = React.useMemo(
      () =>
        deriveRenderOpts(props, {
          name: nodeName,
          descendantNames: PlasmicDescendants[nodeName],
          internalArgPropNames: PlasmicRatings__ArgProps,
          internalVariantPropNames: PlasmicRatings__VariantProps
        }),
      [props, nodeName]
    );
    return PlasmicRatings__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicRatings";
  } else {
    func.displayName = `PlasmicRatings.${nodeName}`;
  }
  return func;
}

export const PlasmicRatings = Object.assign(
  // Top-level PlasmicRatings renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements
    freeBox: makeNodeComponent("freeBox"),

    // Metadata about props expected for PlasmicRatings
    internalVariantProps: PlasmicRatings__VariantProps,
    internalArgProps: PlasmicRatings__ArgProps
  }
);

export default PlasmicRatings;
/* prettier-ignore-end */
